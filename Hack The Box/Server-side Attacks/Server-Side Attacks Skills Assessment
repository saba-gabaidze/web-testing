CBBH: Server-Side Attacks Skills Assessment
Module: SSRF, SSTI, SSI, XSLT
Platform: Hack The Box Academy

Alright, here’s how the Server-Side Attacks assessment went down. The goal was to use everything we learned from this module — SSRF, SSTI, SSI, and XSLT injection — and apply it to a fictional target environment. Felt pretty realistic, like a mini black-box assessment.

SSRF — Starting Point
Naturally, I kicked things off with SSRF since that was first in the module. Captured the initial GET request, then noticed the app made a POST to an internal API. Looked like a potential target for server-side calls.

I set up a netcat listener and tried some simple SSRF payloads to hit my own server, but it kept timing out. Tried multiple ports, still nothing. Might’ve been user error or filtered traffic — either way, I moved on.

Next step was to see if I could make the server talk to itself. Sent a payload like 127.0.0.1/index.php to the api parameter — and it worked. Got the HTML source of the page in the response, which confirmed this wasn’t blind SSRF. That helped a lot.

Fuzzing Ports
Since I knew I could talk to localhost, I wanted to see what internal ports might be exposed. I made a custom wordlist with ports 1 to 10000 and used this ffuf command:

ffuf -w ports.txt -u http://victim/index.php -X POST \
-H "Content-Type: application/x-www-form-urlencoded" \
-d "api=http://127.0.0.1:FUZZ/?id=FusionExpress01" \
-fr "Failed to connect to"
Port 80 worked (obviously), and I found one more open port. But after poking around both, there wasn’t anything useful exposed. So I tried directory fuzzing instead.

I figured the backend runs PHP, so I switched over to fuzzing for .php files:

ffuf -w /usr/share/seclists/Discovery/Web-Content/raft-small-words.txt \
-u http://victim/index.php -X POST \
-H "Content-Type: application/x-www-form-urlencoded" \
-d "api=http://truckapi.htb/FUZZ.php?id=FusionExpress01" \
-fr "The requested URL was not found on this server."
Got a couple hits, but again, nothing meaningful. At this point, SSRF seemed like a dead end. Time to pivot.

SSTI — New Angle
Went back to the original POST request and started testing for SSTI. Used the detection patterns from HTB’s materials and some PortSwigger references.

Tested the classic {{7*7}} and got 49 in the response — confirmed. Kept going down the decision tree and saw that the behavior matched Twig.

Once I knew it was Twig, I played around until I landed remote code execution. Couldn't get LFI to work, but RCE did the trick.

Getting the Flag
Reading the flag was slightly annoying because the app didn’t like %20 (url-encoded spaces). Every time I used it, I’d get a bad URL error.

Eventually, I tried switching to hex encoding for space (\x20), and that worked. Was able to pull the flag and wrap things up.

Final Thoughts
Solid challenge overall. I spent a bit too long on the SSRF path since it looked promising at first, but that’s the kind of rabbit hole that happens in real-life testing too. Good reminder to stay flexible and pivot when needed.

Definitely learned a lot from this one — especially around SSTI detection and payload tuning.
