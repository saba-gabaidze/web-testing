Reflected XSS into Attribute with Angle Brackets HTML-Encoded

Lab Difficulty: Apprentice
Vulnerability Type: Reflected Cross-Site Scripting (XSS)

Summary

This lab demonstrates a reflected XSS vulnerability in which user input is reflected inside a quoted HTML attribute. Although angle brackets (< and >) are HTML-encoded to prevent direct injection of <script> tags, an attacker can still escape from the attribute context and inject JavaScript event handlers to achieve script execution.

The lab objective is to execute arbitrary JavaScript by triggering an alert.

Objective

Inject a payload that escapes from the quoted attribute and executes alert(1) in the victim’s browser.

Technical Walkthrough
1. Reconnaissance

Submitted random input into the search box.

Observed the server response in Burp Suite Repeater.

The input was reflected inside an HTML attribute value like this:

<input type="text" name="search" value="USERINPUT">


Angle brackets (< >) were HTML-encoded, preventing straightforward <script> injection.

2. Identify Injection Context

Since input is inside a quoted attribute (value="..."), the way to escape is:

Break out of the current attribute value.

Introduce a new attribute containing a JavaScript event handler.

3. Craft Payload

The following payload was tested:

" onmouseover="alert(1)


Explanation:

" → closes the current attribute.

onmouseover="alert(1) → adds a new event handler that executes JavaScript when the element is hovered over.

4. Deliver the Exploit

Copied the search results URL containing the payload.

Opened it in the browser.

Hovered the mouse over the vulnerable element.

The alert(1) box popped up, confirming successful XSS execution.

Result

The lab was successfully solved by escaping from the quoted attribute and injecting an onmouseover event handler.

Root Cause

User input was directly reflected into an HTML attribute without proper context-aware encoding.

While angle brackets were encoded, quotes (") were not, allowing attackers to escape the attribute.

Mitigation

Apply context-aware output encoding: encode quotes when inserting user data into attribute values.

Use frameworks or templating engines that automatically perform proper encoding for each HTML context.

Implement a strong Content Security Policy (CSP) to reduce the impact of XSS attacks.
