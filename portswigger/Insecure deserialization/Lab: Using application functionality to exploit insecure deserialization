Insecure deserialization — using app functionality to delete morale.txt

Lab Difficulty: Practitioner
Vulnerability: Insecure deserialization (abusing serialized session data / unsafe method invocation)

Summary

App stores session data as a serialized object and later deserializes it and calls a method using values from that object. The server trusts the deserialized attributes (like avatar_link) and uses them directly. By editing the serialized object in your session cookie to point avatar_link at /home/carlos/morale.txt and then triggering the account-delete action, the app will act on that path — deleting Carlos’s morale.txt. Not surprising once you spot the avatar file path in the session — classic unsafe deserialization + dangerous use of client-controlled data.

Steps Taken

Logged in with the provided creds: wiener : peter. (Backup account exists: gregg : rosebud.)

Went to My account and noticed the app offers an account deletion feature that does a POST /my-account/delete. Nothing weird at first glance — just a normal delete.

Captured a request that included my session cookie and sent it to Burp Repeater.

In Repeater, opened the Inspector for the session cookie and examined the serialized object. Found an attribute avatar_link that contains the file path used for the avatar. That was the lightbulb moment — the app is storing file paths in serialized session data and will later act on them.

Edited the serialized object in the cookie so avatar_link pointed to Carlos’s morale file. Important: update the PHP serialized string length counters. The modified portion looked like this:

s:11:"avatar_link";s:23:"/home/carlos/morale.txt"


(Replace the length numbers appropriately if your exact string lengths differ — the inspector/Replacer will show you where to change them.)
6. Clicked Apply changes in Repeater so the cookie was re-encoded and the request updated.
7. Changed the request line to POST /my-account/delete and sent it. The app processed the request, deleted my account, and (as intended by the lab) also removed /home/carlos/morale.txt. Lab solved.

Root Cause

The application deserializes and trusts client-controlled session data and then uses attributes like avatar_link directly in sensitive filesystem operations. There’s no validation, canonicalization, or access control on the deserialized values — so an attacker who can tamper with serialized data (in the cookie) can make the app read or delete arbitrary files the app has permission to touch.

Fixes and Mitigation

Don’t deserialize untrusted data. Avoid using client-provided serialized objects for security-sensitive operations. If you must, use a safe serialization format and strict schema validation.

Sign and/or MAC session data. If session state is client-side, cryptographically sign it so tampering is detectable. Reject any session that fails verification.

Server-side canonicalization & validation. Never allow arbitrary file paths — normalize paths and restrict operations to an allowed directory (use whitelisting).

Least privilege for file ops. The web process should only be able to modify files it absolutely needs to; avoid granting it permission to delete arbitrary user files.

Avoid invoking dangerous methods on deserialized input. Don’t call methods or perform actions based solely on deserialized content without strict checks.
