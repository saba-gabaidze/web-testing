Detecting NoSQL injection
Lab Difficulty: Apprentice
Vulnerability: NoSQL injection MongoDB

Summary
The category filter talks to a MongoDB backend and it doesn’t properly handle user input. By tampering with the category parameter you can inject boolean expressions and make the server return unreleased products. At first a single quote caused a JS error, which hinted that input was being inserted into a query without proper sanitization. After a few payload tries I got the app to treat the category filter as always-true and the hidden products showed up.

Steps taken

Opened the lab in Burp’s browser and clicked a product category to see what request is made.

Checked Proxy → HTTP history and found the category filter request. Sent that request to Repeater.

In Repeater I tried submitting a single quote in the category parameter. It caused a JavaScript syntax error in the response. Nothing obvious at first glance, but that error suggested input was being embedded into a query or script. Interesting.

Next I tried a small JavaScript-style payload to see how the server reacted. Example payload used:
Gifts'+'
I URL-encoded it before sending. It didn’t cause the same syntax error, which hinted the server was interpreting the input differently server-side.

Tested boolean injections to observe behavior:

A false condition: Gifts' && 0 && 'x
URL-encoded and sent. No products returned. That confirmed the server was evaluating conditions.

A true condition: Gifts' && 1 && 'x
URL-encoded and sent. Products in the Gifts category were returned.

Finally I used an always-true payload to bypass the filter and reveal unreleased items:
Gifts'||1||'
Sent it and then viewed the response in Burp’s browser. The response contained unreleased products. Lab solved.

Root cause
User input was being inserted into a query context without proper validation or parameterization. The application lets injected boolean expressions affect the query logic in MongoDB. In short: unsanitized input plus improper query building equals NoSQL injection.

Fixes and mitigation
 Use parameterized queries or proper query builders that do not concatenate raw strings into queries.
 Validate and sanitize inputs server-side. For category fields, allow only a whitelist of known categories.
 Normalize and canonicalize inputs before using them in queries.
 Apply least privilege to the database user so even if injection happens the damage is limited.
 Add monitoring and alerting for unusual query patterns, like boolean injection attempts.
