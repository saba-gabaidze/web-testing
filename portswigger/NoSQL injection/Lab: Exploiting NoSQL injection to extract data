Lab Difficulty: PRACTITIONER
Vulnerability: NoSQL injection (MongoDB)

Summary
The user lookup endpoint is vulnerable to NoSQL injection. By injecting JavaScript-style conditions into the user query parameter you can make the server evaluate boolean expressions against user documents. Using that behavior I discovered the admin password length, then enumerated each character with a cluster-bomb style attack in Burp Intruder and logged in as administrator. Pretty straightforward once you realise the endpoint treats the input like a query fragment.

Steps taken

Logged into the app with wiener : peter so I could observe normal responses.

In Burp Proxy HTTP history I found the request to user lookup that looked like GET /user/lookup?user=wiener and sent it to Repeater.

Sent a single quote in the user parameter and got an error, which suggested input was being interpreted rather than treated as plain text.

Tried injecting a small JavaScript-style payload like wiener'+', URL-encoded it, and noticed the server still returned the wiener account data. That hinted at server-side injection.

Tested boolean injection. Sending wiener' && '1'=='2 returned "Could not find user" while wiener' && '1'=='1 returned the wiener data. So true vs false conditions are detectable.

Used that technique to discover the admin password length. Tried administrator' && this.password.length < 30 || 'a'=='b and then iterated down until I found the exact length was 8.

Sent the vulnerable request to Intruder, set attack type to Cluster bomb, and used two payload positions in the parameter: administrator' && this.password[ยง0ยง]=='ยงaยง
Payload set 1: numbers 0 through 7 
Payload set 2: letters a through z
URL-encoded the payload positions.

Launched the attack, sorted results by position and response length, and picked out which letter for each index returned a true condition. That gave me the full 8-character admin password.

Logged in as administrator with the discovered password and confirmed the lab was solved.

Root cause
The application builds a MongoDB-style query using unsanitized user input and evaluates parts of it server-side. That allows an attacker to inject conditions that are interpreted against document fields. There are no proper input validation or parameterization protections, and responses differ for true and false conditions so an attacker can infer sensitive values.

Fixes and mitigation
Validate and sanitize all user input before using it in database queries.
Never concatenate raw user input into query objects. Use parameterized queries or driver APIs that separate data from query operators.
Whitelist allowed characters for any parameter that should be a simple string and reject or encode everything else.
Limit error detail and make true/false responses indistinguishable to reduce oracle-style leaks.
Add rate limiting and monitoring for suspicious query patterns, especially repeated probing that looks like enumeration.
