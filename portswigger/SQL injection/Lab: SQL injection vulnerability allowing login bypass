Lab: SQL injection vulnerability allowing login bypass

Difficulty: Apprentice
Vulnerability: SQL Injection — Authentication bypass

Summary

Pretty classic — the login form feeds user input straight into a SQL query without proper sanitization. By injecting a comment after the administrator username, we can truncate the rest of the SQL (the password check) and log in as admin. Easy win when the app trusts raw input.

Steps Taken

Logged into the app with any valid account (just to see how the login request looks).

Opened Burp Suite and intercepted the login request from the web form.

The login POST looked normal — username and password fields in the body. Nothing weird at first glance.

Sent the intercepted request to Burp Repeater and modified the username field to:

administrator'--


Left the password field blank (or whatever was there) and forwarded the request.

Example (form data) before:

username=someuser
password=password123


After injection:

username=administrator'--
password=anything


Sent it. The server accepted the request and returned a response that showed I was authenticated as administrator — no error, no extra checks. I could now access the admin page.

Why it works (brief)

The login SQL probably looked like:

SELECT * FROM users WHERE username = '<username>' AND password = '<password>';


With username = administrator'-- the query becomes:

SELECT * FROM users WHERE username = 'administrator'--' AND password = '...';


Everything after -- is treated as a comment, so the AND password = ... part is ignored. The query effectively becomes WHERE username = 'administrator', letting us bypass the password check.

Root Cause

User input is concatenated directly into SQL without parameterization or escaping. The app trusts the client-supplied username and doesn’t use prepared statements or proper input validation — textbook SQLi.

Fixes & Mitigation

Use parameterized queries / prepared statements for all DB access (never concatenate user input into SQL).

Validate and sanitize inputs server-side (whitelisting where possible).

Apply least privilege to DB accounts (avoid using a high-privileged DB user for app queries).

Implement logging and intrusion detection for suspicious authentication attempts.

Consider multi-factor auth for admin accounts to add another layer beyond passwords.
