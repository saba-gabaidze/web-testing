Lab: Basic password reset poisoning
Difficulty: Apprentice
Vulnerability: Password reset poisoning / Host header manipulation

Summary

Pretty classic trick. The app builds the password-reset link using the Host header you send, and it blindly emails that link. If you can control the Host header (and point it at an attacker-controlled exploit server), a careless victim who clicks the link will send their reset token to your server — giving you the token needed to reset their password. In this lab I used the exploit server + Burp to force a reset link for carlos to point to my exploit host, grabbed his token from the exploit server access log, swapped it into a genuine reset URL, and reset Carlos’s password. Logged in as carlos — done.

Steps Taken

Logged in with the provided creds: wiener : peter.

Went to the login page and clicked “Forgot your password?” — requested a reset for my own account (wiener).

Opened the exploit server’s email client and found the reset email. The link had a temp-forgot-password-token query param. Nothing weird at first glance.

Reset my password once to see the flow and to get a baseline real reset email URL.

Switched to Burp and checked HTTP history. Found the POST /forgot-password request that triggers the email. The username is a body param there. Sent that request to Burp Repeater.

In Repeater, I changed the Host header to an arbitrary value — and the app still accepted it and sent a reset email. Interesting. That confirmed the app uses the Host header to build the URL inside the email.

So I changed the Host header to my exploit server domain (something like YOUR-EXPLOIT-SERVER-ID.exploit-server.net) and changed the username parameter to carlos. Sent the request.

Went to the exploit server access log. There was a GET /forgot-password?temp-forgot-password-token=... entry — that token belonged to Carlos. Saved that token.

Back to the email client: opened the genuine reset email I originally received for my account, copied its reset URL, and replaced the token in that URL with Carlos’s token I grabbed from the exploit server.

Visited the modified URL in the browser, set a new password for Carlos.

Logged in as carlos with the password I set. Lab solved.

Root Cause

The app constructs password-reset links using the request Host header without validating it. Because the server trusts whatever Host the client sends when generating the email link, an attacker can force a link to point at an attacker-controlled host and thus capture the victim’s reset token when they click the link. In short: server-side generation of sensitive URLs trusts client-controlled input.

Fixes and Mitigation

Don’t use the client-sent Host header to build security-sensitive links. Use a server-side canonical domain (config value) when creating reset URLs.

Validate or whitelist Host values if you must accept them; better yet, ignore them for email links.

Make password reset tokens single-use and short-lived (they should already be, but this reduces window).

Log and alert on unusual reset behavior (e.g., many resets for different accounts coming from a single client IP or Host header).

Consider sending emails that include extra context (like “We requested this reset for account: username from IP: x.x.x.x”) so recipients notice suspicious links faster.
