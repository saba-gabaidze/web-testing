Lab: Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped
Difficulty: Practitioner

This lab has a reflected XSS vulnerability inside a JavaScript string that’s used to track the search query. The tricky part is that angle brackets and double quotes get HTML encoded, and single quotes are escaped with backslashes, so you can’t just inject your usual payload straight away.

Steps I took:

First, I submitted a random string in the search box to see how it got reflected. Then I intercepted the request with Burp Suite and sent it to Burp Repeater.

I noticed the input shows up inside a JavaScript string on the page, but whenever I tried to break out with a single quote like test'payload, the single quote was escaped with a backslash (\'), so it wouldn’t break out of the string.

Next, I tried putting a backslash in the input like test\payload and saw that the backslash itself doesn’t get escaped, which is interesting.

Using this, I crafted the payload:


\'-alert(1)//
This payload breaks out of the string because the first \' closes the string (escaping the single quote), then -alert(1)// runs the alert and comments out the rest.

To verify it worked, I right-clicked on the URL, copied it, and pasted it directly into the browser. As soon as the page loaded, the alert popped up — proof that the XSS worked.

Summary:

The key here was understanding how escaping works in the JavaScript string context and using a backslash to cleverly break out despite the single quote escaping. Simple but effective once you get the hang of it.
