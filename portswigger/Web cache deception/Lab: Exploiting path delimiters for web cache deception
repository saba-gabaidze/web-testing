Lab: Exploiting Path Delimiters for Web Cache Deception
Difficulty: Practitioner

This one’s all about getting the app to cache sensitive data by abusing how the cache and origin server interpret path delimiters differently. The goal is to trick the system into caching Carlos’s API key, then grab it ourselves.

Plan
We’re working with a classic web cache deception trick here. The site shows your API key at /my-account, but it shouldn’t be cached. The idea is to add a weird character to the path (called a delimiter) so the cache thinks it’s a static file and stores it — but the origin server still processes it like the original page. That way, when Carlos visits our crafted link, his key gets stored. Then we just grab the cached version.

Step-by-step
1. Log in and find the API key

Logged in as wiener:peter. Went to /my-account and saw my API key in the response — that’s the target.

2. Figure out which characters act as delimiters

Sent /my-account/abc — got a 404. Same for /my-accountabc. So the server doesn’t ignore those.

Time to brute-force some special characters.

Used Burp Intruder with the URL /my-account§§abc, and added a list of common delimiter candidates like ;, ?, =, etc.

Ran the attack and sorted by status code. Two stood out:

; and ? both gave 200 responses with my API key

The rest returned 404s

That means the server treats ; and ? as valid delimiters — the rest just break the path.

3. Check how the cache handles these

Tried /my-account?abc.js. No cache — X-Cache: miss every time. So both the server and cache recognize ? as a delimiter.

Then tried /my-account;abc.js. First response: X-Cache: miss. Sent it again: X-Cache: hit.

That’s it — the server sees the real page, but the cache thinks it’s a static file and stores it. Perfect.

4. Craft the exploit

Set up the payload on the exploit server:


<script>
  document.location="https://YOUR-LAB-ID.web-security-academy.net/my-account;wcd.js"
</script>
Delivered it to Carlos. When he visited it, the server gave him his own API key — and the cache saved it.

5. Profit

Visited that same URL myself:


/my-account;wcd.js
Boom — got Carlos’s API key right there in the response.

Submitted it. Lab solved.

Root cause
Cache thinks ;wcd.js is a static file and stores the response

Server ignores the ; and serves real user data

No protection in place to prevent caching of sensitive routes

Carlos hits the trap URL, and his private data gets cached for us

Fixes
Don’t cache sensitive endpoints like /my-account at all

Normalize and sanitize URLs before caching

Use headers like Cache-Control: no-store for anything user-specific

Educate devs on delimiter quirks — not all
