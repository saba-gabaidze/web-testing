Lab: Exploiting path mapping for web cache deception

Difficulty: Apprentice

This one’s all about tricking the cache into storing sensitive content and then grabbing it for yourself. The app leaks your API key at /my-account, and the goal is to get Carlos’s API key using web cache deception.

Let’s break it down.

Step 1 – Check where the API key lives
Logged in with wiener:peter and looked around. On the main page, I saw my API key right in the response from /my-account. Good start.

Step 2 – Look for a weird cache behavior
In Burp, I sent the /my-account request to Repeater.

Then I tweaked the path a bit — added a random string, like /my-account/abc. Surprisingly, I still got the same response with my API key. That tells me the origin server is ignoring everything after /my-account and still giving the same content.

Next, I tried /my-account/abc.js. This time the response included:


X-Cache: miss
Cache-Control: max-age=30
Interesting. So the cache sees this as a static resource (because of .js) and decides to store it for 30 seconds.

When I sent the same request again a few seconds later, I got:


X-Cache: hit
That means the response is now cached. So basically:

Origin server says: “Eh, it’s still /my-account, here’s the API key.”

Cache says: “Cool, it’s a .js file. I’ll store it.”

That’s the vulnerability right there.

Step 3 – Craft the exploit
I went to the exploit server and wrote a quick script to force Carlos’s browser to visit the same weird URL, but changed it up a little to avoid the cached version I already created:

<script>document.location="https://YOUR-LAB-ID.web-security-academy.net/my-account/wcd.js"</script>
Delivered the exploit.

Now, when Carlos’s browser visits that URL, his /my-account response (which includes his API key) gets cached under /my-account/wcd.js.

Step 4 – Steal the cached response
I waited a couple seconds and then visited:


/my-account/wcd.js
Boom — Carlos’s API key was right there in the response. Copied it, submitted it, and that was the lab.

Root Cause
The origin server is routing everything starting with /my-account the same way, even if extra path junk is added.

The cache doesn’t know that — it sees .js and assumes it's a static file that’s fine to store and serve to anyone.

The attacker tricks the victim into loading the page and saves their sensitive data in a public cache.

Fixes
Don’t serve sensitive data based on path prefixes alone.

Configure your cache to avoid caching authenticated or dynamic content — especially with extensions like .js.

Add proper Cache-Control: no-store headers on sensitive endpoints.
